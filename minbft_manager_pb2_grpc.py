# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import minbft_manager_pb2 as minbft__manager__pb2


class MinbftManagerStub(object):
    """Interface exported by the server
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getNodes = channel.unary_unary(
                '/MinbftManager/getNodes',
                request_serializer=minbft__manager__pb2.GetNodesMsg.SerializeToString,
                response_deserializer=minbft__manager__pb2.NodesDTO.FromString,
                )
        self.getPublicRSAKey = channel.unary_unary(
                '/MinbftManager/getPublicRSAKey',
                request_serializer=minbft__manager__pb2.GetPublicRSAKeyMsg.SerializeToString,
                response_deserializer=minbft__manager__pb2.PublicRSAKeyDTO.FromString,
                )
        self.setNodes = channel.unary_unary(
                '/MinbftManager/setNodes',
                request_serializer=minbft__manager__pb2.NodesDTO.SerializeToString,
                response_deserializer=minbft__manager__pb2.NodesDTO.FromString,
                )
        self.createUI = channel.unary_unary(
                '/MinbftManager/createUI',
                request_serializer=minbft__manager__pb2.CreateUIMsg.SerializeToString,
                response_deserializer=minbft__manager__pb2.USIGCertificateDTO.FromString,
                )
        self.verifyUI = channel.unary_unary(
                '/MinbftManager/verifyUI',
                request_serializer=minbft__manager__pb2.USIGCertificateDTO.SerializeToString,
                response_deserializer=minbft__manager__pb2.UIVerificationDTO.FromString,
                )
        self.compromise = channel.unary_unary(
                '/MinbftManager/compromise',
                request_serializer=minbft__manager__pb2.CompromiseMsg.SerializeToString,
                response_deserializer=minbft__manager__pb2.CompromisedDTO.FromString,
                )
        self.getCompromisedStatus = channel.unary_unary(
                '/MinbftManager/getCompromisedStatus',
                request_serializer=minbft__manager__pb2.GetCompromisedStatusMsg.SerializeToString,
                response_deserializer=minbft__manager__pb2.CompromisedDTO.FromString,
                )
        self.setClients = channel.unary_unary(
                '/MinbftManager/setClients',
                request_serializer=minbft__manager__pb2.ClientsDTO.SerializeToString,
                response_deserializer=minbft__manager__pb2.ClientsDTO.FromString,
                )
        self.getClients = channel.unary_unary(
                '/MinbftManager/getClients',
                request_serializer=minbft__manager__pb2.GetClientsMsg.SerializeToString,
                response_deserializer=minbft__manager__pb2.ClientsDTO.FromString,
                )
        self.serviceRequest = channel.unary_unary(
                '/MinbftManager/serviceRequest',
                request_serializer=minbft__manager__pb2.ServiceRequestMsg.SerializeToString,
                response_deserializer=minbft__manager__pb2.Ack.FromString,
                )
        self.prepare = channel.unary_unary(
                '/MinbftManager/prepare',
                request_serializer=minbft__manager__pb2.PrepareMsg.SerializeToString,
                response_deserializer=minbft__manager__pb2.Ack.FromString,
                )
        self.commit = channel.unary_unary(
                '/MinbftManager/commit',
                request_serializer=minbft__manager__pb2.CommitMsg.SerializeToString,
                response_deserializer=minbft__manager__pb2.Ack.FromString,
                )
        self.crash = channel.unary_unary(
                '/MinbftManager/crash',
                request_serializer=minbft__manager__pb2.CrashMsg.SerializeToString,
                response_deserializer=minbft__manager__pb2.CrashedDTO.FromString,
                )
        self.getCrashedStatus = channel.unary_unary(
                '/MinbftManager/getCrashedStatus',
                request_serializer=minbft__manager__pb2.GetCrashedStatusMsg.SerializeToString,
                response_deserializer=minbft__manager__pb2.CrashedDTO.FromString,
                )
        self.checkpoint = channel.unary_unary(
                '/MinbftManager/checkpoint',
                request_serializer=minbft__manager__pb2.CheckpointMsg.SerializeToString,
                response_deserializer=minbft__manager__pb2.Ack.FromString,
                )
        self.triggerViewChange = channel.unary_unary(
                '/MinbftManager/triggerViewChange',
                request_serializer=minbft__manager__pb2.TriggerViewChangeMsg.SerializeToString,
                response_deserializer=minbft__manager__pb2.Ack.FromString,
                )
        self.requestViewChange = channel.unary_unary(
                '/MinbftManager/requestViewChange',
                request_serializer=minbft__manager__pb2.RequestViewChangeMsg.SerializeToString,
                response_deserializer=minbft__manager__pb2.Ack.FromString,
                )
        self.viewChange = channel.unary_unary(
                '/MinbftManager/viewChange',
                request_serializer=minbft__manager__pb2.ViewChangeMsg.SerializeToString,
                response_deserializer=minbft__manager__pb2.Ack.FromString,
                )
        self.newView = channel.unary_unary(
                '/MinbftManager/newView',
                request_serializer=minbft__manager__pb2.NewViewMsg.SerializeToString,
                response_deserializer=minbft__manager__pb2.Ack.FromString,
                )


class MinbftManagerServicer(object):
    """Interface exported by the server
    """

    def getNodes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getPublicRSAKey(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setNodes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createUI(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def verifyUI(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def compromise(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getCompromisedStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setClients(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getClients(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def serviceRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def prepare(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def commit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def crash(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getCrashedStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def checkpoint(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def triggerViewChange(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def requestViewChange(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def viewChange(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def newView(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MinbftManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getNodes': grpc.unary_unary_rpc_method_handler(
                    servicer.getNodes,
                    request_deserializer=minbft__manager__pb2.GetNodesMsg.FromString,
                    response_serializer=minbft__manager__pb2.NodesDTO.SerializeToString,
            ),
            'getPublicRSAKey': grpc.unary_unary_rpc_method_handler(
                    servicer.getPublicRSAKey,
                    request_deserializer=minbft__manager__pb2.GetPublicRSAKeyMsg.FromString,
                    response_serializer=minbft__manager__pb2.PublicRSAKeyDTO.SerializeToString,
            ),
            'setNodes': grpc.unary_unary_rpc_method_handler(
                    servicer.setNodes,
                    request_deserializer=minbft__manager__pb2.NodesDTO.FromString,
                    response_serializer=minbft__manager__pb2.NodesDTO.SerializeToString,
            ),
            'createUI': grpc.unary_unary_rpc_method_handler(
                    servicer.createUI,
                    request_deserializer=minbft__manager__pb2.CreateUIMsg.FromString,
                    response_serializer=minbft__manager__pb2.USIGCertificateDTO.SerializeToString,
            ),
            'verifyUI': grpc.unary_unary_rpc_method_handler(
                    servicer.verifyUI,
                    request_deserializer=minbft__manager__pb2.USIGCertificateDTO.FromString,
                    response_serializer=minbft__manager__pb2.UIVerificationDTO.SerializeToString,
            ),
            'compromise': grpc.unary_unary_rpc_method_handler(
                    servicer.compromise,
                    request_deserializer=minbft__manager__pb2.CompromiseMsg.FromString,
                    response_serializer=minbft__manager__pb2.CompromisedDTO.SerializeToString,
            ),
            'getCompromisedStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.getCompromisedStatus,
                    request_deserializer=minbft__manager__pb2.GetCompromisedStatusMsg.FromString,
                    response_serializer=minbft__manager__pb2.CompromisedDTO.SerializeToString,
            ),
            'setClients': grpc.unary_unary_rpc_method_handler(
                    servicer.setClients,
                    request_deserializer=minbft__manager__pb2.ClientsDTO.FromString,
                    response_serializer=minbft__manager__pb2.ClientsDTO.SerializeToString,
            ),
            'getClients': grpc.unary_unary_rpc_method_handler(
                    servicer.getClients,
                    request_deserializer=minbft__manager__pb2.GetClientsMsg.FromString,
                    response_serializer=minbft__manager__pb2.ClientsDTO.SerializeToString,
            ),
            'serviceRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.serviceRequest,
                    request_deserializer=minbft__manager__pb2.ServiceRequestMsg.FromString,
                    response_serializer=minbft__manager__pb2.Ack.SerializeToString,
            ),
            'prepare': grpc.unary_unary_rpc_method_handler(
                    servicer.prepare,
                    request_deserializer=minbft__manager__pb2.PrepareMsg.FromString,
                    response_serializer=minbft__manager__pb2.Ack.SerializeToString,
            ),
            'commit': grpc.unary_unary_rpc_method_handler(
                    servicer.commit,
                    request_deserializer=minbft__manager__pb2.CommitMsg.FromString,
                    response_serializer=minbft__manager__pb2.Ack.SerializeToString,
            ),
            'crash': grpc.unary_unary_rpc_method_handler(
                    servicer.crash,
                    request_deserializer=minbft__manager__pb2.CrashMsg.FromString,
                    response_serializer=minbft__manager__pb2.CrashedDTO.SerializeToString,
            ),
            'getCrashedStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.getCrashedStatus,
                    request_deserializer=minbft__manager__pb2.GetCrashedStatusMsg.FromString,
                    response_serializer=minbft__manager__pb2.CrashedDTO.SerializeToString,
            ),
            'checkpoint': grpc.unary_unary_rpc_method_handler(
                    servicer.checkpoint,
                    request_deserializer=minbft__manager__pb2.CheckpointMsg.FromString,
                    response_serializer=minbft__manager__pb2.Ack.SerializeToString,
            ),
            'triggerViewChange': grpc.unary_unary_rpc_method_handler(
                    servicer.triggerViewChange,
                    request_deserializer=minbft__manager__pb2.TriggerViewChangeMsg.FromString,
                    response_serializer=minbft__manager__pb2.Ack.SerializeToString,
            ),
            'requestViewChange': grpc.unary_unary_rpc_method_handler(
                    servicer.requestViewChange,
                    request_deserializer=minbft__manager__pb2.RequestViewChangeMsg.FromString,
                    response_serializer=minbft__manager__pb2.Ack.SerializeToString,
            ),
            'viewChange': grpc.unary_unary_rpc_method_handler(
                    servicer.viewChange,
                    request_deserializer=minbft__manager__pb2.ViewChangeMsg.FromString,
                    response_serializer=minbft__manager__pb2.Ack.SerializeToString,
            ),
            'newView': grpc.unary_unary_rpc_method_handler(
                    servicer.newView,
                    request_deserializer=minbft__manager__pb2.NewViewMsg.FromString,
                    response_serializer=minbft__manager__pb2.Ack.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MinbftManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MinbftManager(object):
    """Interface exported by the server
    """

    @staticmethod
    def getNodes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MinbftManager/getNodes',
            minbft__manager__pb2.GetNodesMsg.SerializeToString,
            minbft__manager__pb2.NodesDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getPublicRSAKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MinbftManager/getPublicRSAKey',
            minbft__manager__pb2.GetPublicRSAKeyMsg.SerializeToString,
            minbft__manager__pb2.PublicRSAKeyDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setNodes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MinbftManager/setNodes',
            minbft__manager__pb2.NodesDTO.SerializeToString,
            minbft__manager__pb2.NodesDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def createUI(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MinbftManager/createUI',
            minbft__manager__pb2.CreateUIMsg.SerializeToString,
            minbft__manager__pb2.USIGCertificateDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def verifyUI(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MinbftManager/verifyUI',
            minbft__manager__pb2.USIGCertificateDTO.SerializeToString,
            minbft__manager__pb2.UIVerificationDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def compromise(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MinbftManager/compromise',
            minbft__manager__pb2.CompromiseMsg.SerializeToString,
            minbft__manager__pb2.CompromisedDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getCompromisedStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MinbftManager/getCompromisedStatus',
            minbft__manager__pb2.GetCompromisedStatusMsg.SerializeToString,
            minbft__manager__pb2.CompromisedDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setClients(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MinbftManager/setClients',
            minbft__manager__pb2.ClientsDTO.SerializeToString,
            minbft__manager__pb2.ClientsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getClients(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MinbftManager/getClients',
            minbft__manager__pb2.GetClientsMsg.SerializeToString,
            minbft__manager__pb2.ClientsDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def serviceRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MinbftManager/serviceRequest',
            minbft__manager__pb2.ServiceRequestMsg.SerializeToString,
            minbft__manager__pb2.Ack.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def prepare(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MinbftManager/prepare',
            minbft__manager__pb2.PrepareMsg.SerializeToString,
            minbft__manager__pb2.Ack.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def commit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MinbftManager/commit',
            minbft__manager__pb2.CommitMsg.SerializeToString,
            minbft__manager__pb2.Ack.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def crash(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MinbftManager/crash',
            minbft__manager__pb2.CrashMsg.SerializeToString,
            minbft__manager__pb2.CrashedDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getCrashedStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MinbftManager/getCrashedStatus',
            minbft__manager__pb2.GetCrashedStatusMsg.SerializeToString,
            minbft__manager__pb2.CrashedDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def checkpoint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MinbftManager/checkpoint',
            minbft__manager__pb2.CheckpointMsg.SerializeToString,
            minbft__manager__pb2.Ack.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def triggerViewChange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MinbftManager/triggerViewChange',
            minbft__manager__pb2.TriggerViewChangeMsg.SerializeToString,
            minbft__manager__pb2.Ack.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def requestViewChange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MinbftManager/requestViewChange',
            minbft__manager__pb2.RequestViewChangeMsg.SerializeToString,
            minbft__manager__pb2.Ack.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def viewChange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MinbftManager/viewChange',
            minbft__manager__pb2.ViewChangeMsg.SerializeToString,
            minbft__manager__pb2.Ack.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def newView(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MinbftManager/newView',
            minbft__manager__pb2.NewViewMsg.SerializeToString,
            minbft__manager__pb2.Ack.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
