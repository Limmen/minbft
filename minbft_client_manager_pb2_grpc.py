# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import minbft_client_manager_pb2 as minbft__client__manager__pb2


class MinbftClientManagerStub(object):
    """Interface exported by the server
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getNodes = channel.unary_unary(
                '/MinbftClientManager/getNodes',
                request_serializer=minbft__client__manager__pb2.GetClientNodesMsg.SerializeToString,
                response_deserializer=minbft__client__manager__pb2.ClientNodesDTO.FromString,
                )
        self.setNodes = channel.unary_unary(
                '/MinbftClientManager/setNodes',
                request_serializer=minbft__client__manager__pb2.ClientNodesDTO.SerializeToString,
                response_deserializer=minbft__client__manager__pb2.ClientNodesDTO.FromString,
                )
        self.getPublicRSAKey = channel.unary_unary(
                '/MinbftClientManager/getPublicRSAKey',
                request_serializer=minbft__client__manager__pb2.GetClientPublicRSAKeyMsg.SerializeToString,
                response_deserializer=minbft__client__manager__pb2.ClientPublicRSAKeyDTO.FromString,
                )
        self.serviceRequest = channel.unary_unary(
                '/MinbftClientManager/serviceRequest',
                request_serializer=minbft__client__manager__pb2.ClientServiceRequestMsg.SerializeToString,
                response_deserializer=minbft__client__manager__pb2.ClientAck.FromString,
                )
        self.serviceReply = channel.unary_unary(
                '/MinbftClientManager/serviceReply',
                request_serializer=minbft__client__manager__pb2.ClientServiceReplyMsg.SerializeToString,
                response_deserializer=minbft__client__manager__pb2.ClientAck.FromString,
                )
        self.configure = channel.unary_unary(
                '/MinbftClientManager/configure',
                request_serializer=minbft__client__manager__pb2.ConfigureClientMsg.SerializeToString,
                response_deserializer=minbft__client__manager__pb2.ClientAck.FromString,
                )


class MinbftClientManagerServicer(object):
    """Interface exported by the server
    """

    def getNodes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setNodes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getPublicRSAKey(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def serviceRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def serviceReply(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def configure(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MinbftClientManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getNodes': grpc.unary_unary_rpc_method_handler(
                    servicer.getNodes,
                    request_deserializer=minbft__client__manager__pb2.GetClientNodesMsg.FromString,
                    response_serializer=minbft__client__manager__pb2.ClientNodesDTO.SerializeToString,
            ),
            'setNodes': grpc.unary_unary_rpc_method_handler(
                    servicer.setNodes,
                    request_deserializer=minbft__client__manager__pb2.ClientNodesDTO.FromString,
                    response_serializer=minbft__client__manager__pb2.ClientNodesDTO.SerializeToString,
            ),
            'getPublicRSAKey': grpc.unary_unary_rpc_method_handler(
                    servicer.getPublicRSAKey,
                    request_deserializer=minbft__client__manager__pb2.GetClientPublicRSAKeyMsg.FromString,
                    response_serializer=minbft__client__manager__pb2.ClientPublicRSAKeyDTO.SerializeToString,
            ),
            'serviceRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.serviceRequest,
                    request_deserializer=minbft__client__manager__pb2.ClientServiceRequestMsg.FromString,
                    response_serializer=minbft__client__manager__pb2.ClientAck.SerializeToString,
            ),
            'serviceReply': grpc.unary_unary_rpc_method_handler(
                    servicer.serviceReply,
                    request_deserializer=minbft__client__manager__pb2.ClientServiceReplyMsg.FromString,
                    response_serializer=minbft__client__manager__pb2.ClientAck.SerializeToString,
            ),
            'configure': grpc.unary_unary_rpc_method_handler(
                    servicer.configure,
                    request_deserializer=minbft__client__manager__pb2.ConfigureClientMsg.FromString,
                    response_serializer=minbft__client__manager__pb2.ClientAck.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MinbftClientManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MinbftClientManager(object):
    """Interface exported by the server
    """

    @staticmethod
    def getNodes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MinbftClientManager/getNodes',
            minbft__client__manager__pb2.GetClientNodesMsg.SerializeToString,
            minbft__client__manager__pb2.ClientNodesDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setNodes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MinbftClientManager/setNodes',
            minbft__client__manager__pb2.ClientNodesDTO.SerializeToString,
            minbft__client__manager__pb2.ClientNodesDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getPublicRSAKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MinbftClientManager/getPublicRSAKey',
            minbft__client__manager__pb2.GetClientPublicRSAKeyMsg.SerializeToString,
            minbft__client__manager__pb2.ClientPublicRSAKeyDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def serviceRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MinbftClientManager/serviceRequest',
            minbft__client__manager__pb2.ClientServiceRequestMsg.SerializeToString,
            minbft__client__manager__pb2.ClientAck.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def serviceReply(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MinbftClientManager/serviceReply',
            minbft__client__manager__pb2.ClientServiceReplyMsg.SerializeToString,
            minbft__client__manager__pb2.ClientAck.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def configure(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MinbftClientManager/configure',
            minbft__client__manager__pb2.ConfigureClientMsg.SerializeToString,
            minbft__client__manager__pb2.ClientAck.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
